====
ENTITIES
====

-- Student
-- Attribute		Simplicity			Num-values		Data Type
-----------------------------------------------------------------
   student_id		Simple, Not NULL, 	Single-valued, 	Int
   name			    Simple, Not NULL, 	Single-valued, 	String
   phone			Simple, Not NULL, 	Single-valued, 	String
   address			Composite,			Multi-valued, 	String
   course			Simple,				Multi-valued, 	String
   enrollment_date	Simple, Not NULL,	Single-valued,	Date
   graduate_date	Simple,				Single-valued,	DATE
   graduated_bool	Derived,			Single-valued,	BOOLEAN		


-- Staff
-- Attribute		Simplicity			Num-values		Data Type
-----------------------------------------------------------------
   staff_id		    Simple,	Not NULL,	Single-valued, 	Int
   name			    Simple, Not NULL, 	Single-valued, 	String
   phone			Simple, Not NULL, 	Single-valued, 	String
   address			Composite,			Multi-valued, 	String
   salary			Simple, Not NULL, 	Single-valued, 	Float
   IRD_num			Simple, Not NULL,	Single-valued,	Int


===
RELATIONS
===

TEACHES (Staff, Paper) - N:M -- Masaaki modelled this before me, and his modelling was identical to how I would have.
TAKES (Student, Paper) - N:M -- Masaaki modelled this in his work, identically to how I modelled mine. 
ENROLLED_IN (Student, Course) - N:M
SUPERVISES(Staff, Student) - M:1 -- I have changed this fron the original, to be M:1, as it fits more appropriately to the real world version.
COORDINATES(Staff, Course) - 1:1
TEACHES(Staff, Paper) - N:M

DEAN_OF (Staff, Campus) - 1:1
STUDENT_AT (Student, Campus) - N:1
STAFF_AT (Staff, Campus) - N:1



====
SEVEN STEP PROCESS 
====

 Seven step process:
 
 Staff:
 STAFF_ID NAME PHONE ADDRESS SALARY IRD_NUMBER
 
 -- Expanded address into three fields.
 STAFF_ID NAME PHONE STREETNUMBER STREETNAME SUBURB SALARY IRD_NUMBER
 
 -- Created entity course at this point, elaborated later.
 STAFF_ID NAME PHONE STREETNUMBER STREETNAME SUBURB SALARY IRD_NUMBER COORDINATES_COURSE (references COURSE)
 
 STAFF_ID NAME PHONE STREETNUMBER STREETNAME SUBURB SALARY IRD_NUMBER COORDINATES_COURSE (references COURSE) OFFICE_IN (references BUILDING) SUPERVISES_STUDENT (references STUDENT STUDENT_ID) DEPARTMENT (references singular DEPARTMENT from experience) DEAN_OF (references CAMPUS) CAMPUS (references CAMPUS)


 Student:
 STUDENT_ID NAME PHONE ADDRESS COURSE ENROLLMENT GRADUATION GRADUATED
 
 STUDENT_ID NAME PHONE STREETNUMBER STREETNAME SUBURB COURSE ENROLLMENT GRADUATION GRADUATED
 
 STUDENT_ID NAME PHONE STREETNUMBER STREETNAME SUBURB COURSE1 (references COURSE) COURSE2 (references COURSE) ENROLLMENT GRADUATION GRADUATED
 
 -- Removed graduated as this could also be accomplished by a query, and could easily become out of sync with the entity.
 STUDENT_ID NAME PHONE STREETNUMBER STREETNAME SUBURB COURSE1 (references COURSE) COURSE2 (references COURSE) ENROLLMENT GRADUATION
 
 -- "Campus" is a better title than STUDENT_AT.
 STUDENT_ID NAME PHONE STREETNUMBER STREETNAME SUBURB COURSE1 (references COURSE) COURSE2 (references COURSE) ENROLLMENT GRADUATION CAMPUS
 
 Course: 
 -- Removed the "num_students" element as this could be done by a query more reliably, and "num_students" could easily become out of sync with the entity.
 COURSE (OR COURSE ID) YEARSREQUIRED UNDERGRADUATE POSTGRADUATE
 


===
NORMALISATION
===

 -- Normalisation led to the creation of additional entities and the reduction of fields within staff, students, and course.
 
 -- Course entity.
 -- Before:
 COURSE (Primary key) YEARSREQUIRED UNDERGRADUATE POSTGRADUATE
 
 -- UNDERGRADUATE is removed, POSTGRADUATE is retained as a False answer in the POSTGRADUATE field would imply an UNDERGRADUATE course.
 
 -- After:
 COURSE(Primary key) YEARSREQUIRED POSTGRADUATE COORDINATOR 
 
 -- COORDINATOR is added to satisfy the modelling of the COORDINATES relationship 

 -- Student entity.
 -- Before:
 STUDENT_ID (Primary key) NAME PHONE STREETNUMBER STREETNAME SUBURB COURSE1 COURSE2 ENROLLMENT GRADUATION CAMPUS
 
 -- COURSE1, COURSE2 have been removed and replaced by the creation of the enrolled entity.
 -- SUBURB has been removed and replaced by the introduction of the suburb entity. 
 -- CAMPUS has been renamed CAMPUS_NAME
 -- To satisfy the modelling of the papers a student takes, the takes entity was created, however Masaaki modelled an identical entity with the same field names. I am leaving it out of my document, since Masaaki also modelled the paper entity, and it feels more like his turf.
 
 -- After:
 STUDENT_ID (Primary key) NAME PHONE STREETNUMBER STREETNAME ENROLLMENT GRADUATION CAMPUS_NAME
 
 -- New entities:
 -- enrolled 
 STUDENT_ID (Primary key) PAPER_ID (Primary key)
 
 -- suburb
 STREETNAME (Primary key) SUBURB
 
 -- Staff entity .
 -- Before:
 STAFF_ID (Primary key) NAME PHONE STREETNUMBER STREETNAME SUBURB SALARY IRD_NUMBER COORDINATES_COURSE OFFICE_IN SUPERVISES_STUDENT DEPARTMENT DEAN_OF CAMPUS 
 
 -- SUBURB has been removed and replaced by the introduction of the suburb entity. 
 -- CAMPUS has been renamed CAMPUS_NAME
 -- Address information has been changed, similar to the changes made in student.
 -- COORDINATES_COURSE has been removed, as it is in the COURSE entity.
 
 -- After:
 STAFF_ID (Primary key) NAME PHONE STREETNUMBER STREETNAME SALARY IRD_NUMBER OFFICE_IN SUPERVISES_STUDENT DEPARTMENT DEAN_OF CAMPUS_NAME
 
 -- New entities:
 -- TODO: Integration of whoever models buildings.


===
Load.sql
===
-- I've ignored the takes table even though I added it in my work, as Masaaki's version was submitted first, I'm going to go off that- they were identical anyway.
-- TODO: Inform Masaaki that the student_id format is NUMBER(8,0)
-- I'm doing numbers of size 1 for my booleans, given the way that oracle handles stuff like that.
DROP TABLE suburb;
DROP TABLE enrolled;
DROP TABLE course;

DROP TABLE student;
DROP TABLE staff; -- Need to re-order dropping to match initialisation.

CREATE TABLE student (
	student_id			NUMBER(8,0)		NOT NULL	PRIMARY KEY,
	name				VARCHAR(80)		NOT NULL,
	phone				VARCHAR(80)		NOT NULL,
	streetnumber		INTEGER			NOT NULL, 
	streetname			VARCHAR(80)		NOT NULL,
	enrollment			DATE			NOT NULL,
	graduation			DATE,
	CONSTRAINT chk_date CHECK ( enrollment < graduation ),
	campus_name			VARCHAR(80)		NOT NULL,		CONSTRAINT stu_FOREIGN KEY(campus_name) REFERENCES campus(name),
);

CREATE TABLE staff (
	staff_id			NUMBER(8,0)		NOT NULL	PRIMARY KEY,
	name				VARCHAR(80)		NOT NULL,
	phone				VARCHAR(80)		NOT NULL,
	streetnumber		INTEGER			NOT NULL,
	streetname			VARCHAR(80)		NOT NULL,
	salary				INTEGER			NOT NULL,
	ird_number			NUMBER			NOT NULL,
	office_in			VARCHAR(255),
	supervises_student	NUMBER(8,0)		,
	department			VARCHAR(80)		NOT NULL ,
	dean_of				VARCHAR(80)		,
	campus_name			VARCHAR(80)		NOT NULL FOREIGN KEY(campus_name) 	REFERENCES campus(name),
	CONSTRAINT sta_sup_fk FOREIGN KEY(supervises_student) REFERENCES student(student_id),
	CONSTRAINT sta_dep_fk FOREIGN KEY(department)	REFERENCES department(department_name),
	CONSTRAINT sta_dean_fk FOREIGN KEY(dean_of) REFERENCES campus(name)
);


CREATE TABLE suburb (
	streetname			VARCHAR(80)		NOT NULL	PRIMARY KEY,
	suburbname			VARCHAR(80)		NOT NULL)
);
	
CREATE TABLE course (
	course_name			VARCHAR(80)		NOT NULL	PRIMARY KEY,
	years_required		INTEGER			NOT NULL,
	postgraduate		NUMBER(1,0)		NOT NULL,
	CONSTRAINT chk_boolpg CHECK ( postgraduate < 2 ),
	cooordinator_id		NUMBER(8,0)		NOT NULL,
	CONSTRAINT cou_coord_fk FOREIGN KEY(coordinator_id)		REFERENCES staff(staff_id)
);

CREATE TABLE enrolled (
	student_id			NUMBER(8,0)		NOT NULL ,
	course_name			VARCHAR(80)		NOT NULL,
	completed			NUMBER(1,0),
	CONSTRAINT chk_boolcompleted CHECK ( completed < 2 ),
	PRIMARY KEY(student_id, course_name)
	CONSTRAINT enr_stuid_fk FOREIGN KEY (student_id)		REFERENCES student(student_id),
	CONSTRAINT enr_course_fk FOREIGN KEY (course_name)		REFERENCES course(course_name)
);
